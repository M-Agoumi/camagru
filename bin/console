#!/usr/bin/env php
<?php

	/** our constants variables */

	/** colors */
	CONST RESET = "\e[0m";
	CONST RED = "\e[31m";
	CONST GREEN = "\e[32m";
	CONST YELLOW = "\e[33m";
	CONST BLUE = "\e[34m";
	CONST MAGENTA = "\e[35m";
	CONST CYAN = "\e[36m";
	CONST WHITE = "\e[37m";
	/** background colors */
	CONST B_RESET = "\e[0;1m";
	CONST B_RED = "\e[31;1m";
	CONST B_GREEN = "\e[32;1m";
	CONST B_YELLOW = "\e[33;1m";
	CONST B_BLUE = "\e[34;1m";
	CONST B_MAGENTA = "\e[35;1m";
	CONST B_CYAN = "\e[36;1m";
	CONST B_WHITE = "\e[37;1m";


	/** start of script */

	/** check if script is run as a cli */
	if (PHP_SAPI !== 'cli') {
    		echo 'bin/console must be run as a CLI application';
    		exit(1);
	}

	if ($argc == 1) {
		show_help();
		exit();
	}
	$command = $argv[1];
	$arguments = explode(':', $command);
	$command = array_shift($arguments);
	$arguments = $arguments ?? null;

	/** get extra parameters */
    $parameters = NULL;
	if ($argc > 2) {
	    $parameters = array_slice($argv, 2);
    }

	/** $console a predefine variable for other scripts to access if they are running tho console */
    $console = 1;

	/** command reading debugger */
    // echo $command . PHP_EOL;
    //var_dump($parameters);

	if ($command === 'make') {
		/**
		 * MAKE COMMAND
		 */
		$controllerName = getControllerName($argv[2] ?? '');
		makeController($controllerName);
	} else if ($command == 'migrate') {
		/**
		 * MIGRATE COMMAND
		 */
	    if (!$arguments)
	        migrateHelper();
	    else if ($arguments[0] == 'create') {
	        if (isset($arguments[1]) && $arguments[1] == 'database') {
	            echo "creating database..." . PHP_EOL;
	            if (!$databaseConfig = getDatabaseConfig())
	                die("Config File is not found" . PHP_EOL);
	            if (!$database = getDatabaseName($databaseConfig['DB_DSN']))
	                die("config file is miss written please check config/db.config.example\n");

	            /** get connection config from config file */
                $dsn = getDatabaseDSN($databaseConfig['DB_DSN']);
                $user = $databaseConfig['DB_USER'] ?? NULL;
                $pass = $databaseConfig['DB_PASSWORD'] ?? NULL;

                /** try to connect to database and create the database */
                try {
                    $dbh = new PDO($dsn, $user , $pass);

                    $dbh->exec("CREATE DATABASE IF NOT EXISTS `$database` ;
                        CREATE USER '$user'@'localhost' IDENTIFIED BY '$pass';
                        GRANT ALL ON `$database`.* TO '$user'@'localhost';
                        FLUSH PRIVILEGES;")
                    or die(print_r($dbh->errorInfo(), true));
                    echo "database $database created or already exists\n";
                    unset($dbh);
                }
                catch (PDOException $e) {
                    die("DB ERROR: " . $e->getMessage());
                }
            }
        } elseif ($arguments[0] == 'migrate') {
	        if (isset($arguments[1]) && $arguments[1] == 'down'){
	            $action = 1;
		        $migrationsNumber = $arguments[2] ?? 0;
		        echo "Reverting last ";
                echo  !$migrationsNumber ? "all" : $migrationsNumber;
                echo " migration(s)" . PHP_EOL;
            } else {
                echo "Applying Migrations" . PHP_EOL;
            }
	        include "migrations.php";
        } else {
	        migrateHelper();
        }
    } else if ($command == 'server') {
		/**
		 * SERVER COMMAND
		 */
	    if (!$arguments)
	        serverHelper();
	    elseif ($arguments[0] == 'start') {
	        serverStartNoFail($parameters);
        } elseif ($arguments[0] == 'stop') {
		    serverStop();
        } elseif ($arguments[0] == 'status') {
	    	$port = serverStatus();
	    	if ($port)
	    		echo 'server is running on port ' . $port . PHP_EOL;
	    	else
	    		echo 'server is not running' . PHP_EOL;
        } elseif ($arguments[0] == 'restart'){
	    	serverRestart($parameters);
	    } elseif($arguments[0] == 'log') {
	    	$server = serverStatus();
	    	if ($server)
	    		echo "server is running on http://localhost:" . $server;
	    	else
	    		echo "server is not running";

		    if ($parameters) {
			    if (in_array('-t', $parameters)) {
				    $file = "runtime/logs/server.log";
				    $last_modify_time = 0;
				    $first_time = true;
				    while (true) {
					    sleep(1); // 1 s
					    clearstatcache(true, $file);
					    $curr_modify_time = filemtime($file);
					    if ($last_modify_time < $curr_modify_time) {
					    	if ($first_time)
					    		$first_time = false;
					    	else
						        echo file_get_contents($file);
					    }

					    $last_modify_time = $curr_modify_time;
				    }
			    } else
				    echo "Parameter is unknown" . PHP_EOL;
		    }
		    $file = file("runtime/logs/server.log");
		    for ($i = max(0, count($file)-11); $i < count($file); $i++) {
			    echo $file[$i];
		    }
	    } elseif($arguments[0] == 'clear') {
		    $filePath = 'runtime/logs/server.log';
		    unlink($filePath);
		    fopen($filePath, 'wb');
		    echo 'logs cleared' . PHP_EOL;
	    } else {
	    	serverHelper();
	    }
	} elseif ($command == 'setup') {
		if (!$arguments)
			setupHelper();
		elseif ($arguments[0] == 'mail') {
			$email = getUserEmail($parameters);
			shell_exec('sh bin/scripts/mailcatcher.sh ' . $email);
			$status = serverStatus();
			if ($status != 0)
				serverRestart($parameters);
		} elseif ($arguments[0] == 'setup') {
			/** full setup for the first run */
			/** check if database config file exists */
			if (!file_exists('config/db.conf')) {
				write("Couldn't find database config file, creating one...",'warning',true);
				$config = getUserDatabaseConfig();
				createDatabaseConfigFile($config);
				write('database config file created', 'success', true);
			}
			write('creating database if doesn\'t exist', 'warning', true);
			shell_exec('php bin/console migrate:create:database');
			write('applying migrations', 'warning', true);
			liveExecuteCommand('bin/console migrate:migrate');
			write("all ready now, do you want to run a server in development mode?[y\\n]", 'success');
			write('[no]', 'danger', true);

			$isMailcatcherInstalled = shell_exec('which mailcatcher');
			if (stristr($isMailcatcherInstalled, 'mailcatcher')) {
				write('we detected you have mail catcher installed do you want to enable it? [Y\n][n]','', true);
				write('(ignore if it is already working)','warning');
				write('', 'info', true, false);
				$setupMail = readline();
				if ($setupMail == 'y' || $setupMail == 'Y') {
					write('setting up mail, enter your email');
					write('', 'info', true, false);
					$mail = readline();
					echo shell_exec('bin/console setup:mail ' . $mail);
				}
			}
			write('you can always run a server see [bin/console server] for more information', 'warning', true);
			$start = readline();
			if ($start == 'y' || $start == 'Y')
				echo shell_exec('bin/console server:start');
		} else {
			setupHelper();
		}
	} else {
	    echo "Command Not Found" . PHP_EOL;
        show_help();
        exit(1);
    }

	/**
	 * functionality functions
	 */

	function liveExecuteCommand($cmd)
	{

		while (@ ob_end_flush()); // end all output buffers if any

		$proc = popen("$cmd 2>&1 ; echo Exit status : $?", 'r');

		$live_output     = "";
		$complete_output = "";

		while (!feof($proc))
		{
			$live_output     = fread($proc, 4096);
			$complete_output = $complete_output . $live_output;
			echo "$live_output";
			@ flush();
		}

		pclose($proc);

		// get exit status
		preg_match('/[0-9]+$/', $complete_output, $matches);

		// return exit status and intended output
		return array (
			'exit_status'  => intval($matches[0]),
			'output'       => str_replace("Exit status : " . $matches[0], '', $complete_output)
		);
	}

	function getUserEmail($parameters) {
		if ($parameters && $parameters[0])
			return $parameters[0];

		$confirmation = 'n';
		$email = 'example@email.com';

		while (!($confirmation == 'Y' || $confirmation == 'y')) {
			write('please provide application email:');
			write('', 'info', true, false);
			$email = readline();
			write('your email is ' . $email . '? [Y\n]', 'warning');
			write('[n]', 'danger');
			write(' ', 'info', true, false);
			$confirmation = readline();
		}
		write('address email confirmed', 'success', true);

		return $email;
	}

	function getUserDatabaseConfig(): array
	{
		write('please provide your database host [127.0.0.1]:');
		write('', 'info', true, false);
		$host = readline();

		write('please provide your database port [3306]:');
		write('', 'info', true, false);
		$port = readline();

		write('please provide your database name:');
		write('', 'info', true, false);
		$dbname = readline();

		write('please provide your database user [username]:');
		write('', 'info', true, false);
		$username = readline() ?? 'username';

		write('please provide your database password [password]:');
		write('', 'info', true, false);
		$password = readline() ?? 'password';

		return [
			'host' => !empty($host) ? $host : '127.0.0.1',
			'port' => !empty($port) ? $port : '3306',
			'dbname' => $dbname,
			'username' => !empty($username) ? $username : 'username',
			'password' => !empty($password) ? $password : 'password'
		];
	}

	/** create database config file */
	function createDatabaseConfigFile(array $config) {
		$fileContent = "DB_DSN = \"mysql:host=" . $config['host'] . ";port=" . $config['port'] .
			";dbname=" . $config['dbname'] . '"' .PHP_EOL;
		$fileContent .= "DB_USER = " . $config['username'] . PHP_EOL;
		$fileContent .= "DB_PASSWORD = " . $config['password'] . PHP_EOL;

		$configFile = fopen("config/db.conf", "w");
		fwrite($configFile, $fileContent);
	}

	/** make functions */
	function makeController($controllerName) {
		echo "making $controllerName" . PHP_EOL;
		$controllerContent = ControllerContent($controllerName);

		$controller = fopen("src/controller/" . $controllerName . ".php", "w");

		fwrite($controller, $controllerContent);
		fclose($controller);
		echo 'Controller created'. PHP_EOL;
	}

	function ControllerContent($controllerName) {
		$time = date("Y/m/d H:i:s");;
		$content = '<?php' . PHP_EOL;
		$content .= '/* ************************************************************************************************ */
/*                                                                                                  */
/*                                                        :::   ::::::::   ::::::::  :::::::::::    */
/*   ' . $controllerName . '.php                                :+:+:  :+:    :+: :+:    :+: :+:     :+:     */
/*                                                      +:+         +:+        +:+        +:+       */
/*   By: magoumi <magoumi@student.1337.ma>             +#+      +#++:      +#++:        +#+         */
/*                                                    +#+         +#+        +#+      +#+           */
/*   Created: ' . $time . ' by magoumi         #+#  #+#    #+# #+#    #+#     #+#             */
/*   Updated: ' . $time . ' by magoumi      ####### ########   ########      ###.ma           */
/*                                                                                                  */
/* ************************************************************************************************ */
';
		$content .= PHP_EOL . 'namespace controller;' . PHP_EOL . PHP_EOL;
		$content .= 'class ' . $controllerName . ' extends Controller' . PHP_EOL;
		$content .= '{' . PHP_EOL . PHP_EOL;
		$content .= '   public function __construct()' . PHP_EOL;
		$content .= '   {' . PHP_EOL . '        // TODO implement your controller' . PHP_EOL . '   }' . PHP_EOL . '}' . PHP_EOL;

		return $content;
	}

	/** server functions */

	function serverStartNoFail($parameters, $port = 8000) {
		/** keep trying till it work */
		$firstTime = true;

		while (1) {
			// check if there is a running server already
			if (serverStatus())
				die("Can't run server, server is already running.." . PHP_EOL);

			if ($parameters && $firstTime) {
				if (in_array('-p', $parameters))
					$port = $parameters[array_search('-p', $parameters) + 1] ?? $port;

				$firstTime = false;
			}
			echo "Starting a development server on http://localhost:" . $port . PHP_EOL;
			$server_status = serverStart($port);

			if ($server_status == "0\n" || $server_status == '') {
				echo "Starting a server on port " . $port . " failed, port already used" . PHP_EOL;
				$port = $port + 1;
			} else {
				break ;
			}
		}
	}

	function serverStart($port = 8000)
	{
		shell_exec('sh bin/scripts/server_start.sh ' . $port);

		return(serverStatus());
	}

	function serverStatus() {
		if (file_exists('var/server-app.pid')) {
			$port = shell_exec("sh bin/scripts/server_status.sh");
			if ($port != "0\n")
				return $port;
			else
				unlink('var/server-app.pid');
		}

		return 0;
	}

	function serverStop() {
		if (file_exists('var/server-app.pid')) {
			if (shell_exec("sh bin/scripts/server_status.sh") != "0\n") {
				echo "Stopping server.." . PHP_EOL;
				shell_exec('sh bin/scripts/server_stop.sh');
			} else {
				unlink('var/server-app.pid');
				echo "There is no running server.." . PHP_EOL;
			}
		} else
			echo "There is no running server" . PHP_EOL;
	}

	function serverRestart($parameters) {
		$port = serverStatus();
		if ($port) {
			echo "stopping server\n";
			shell_exec('sh bin/scripts/server_stop.sh');
		} else {
			$port = 8000;
		}
		serverStartNoFail($parameters, $port);
	}



	/**
	 * Helper functions
	 * 
	 * those functions are helping the main functions up
	 */

	/** general helpers */

	function write($text, $color = "", $newline = false, $reset = true) {

		switch ($color) {
			case "warning":
				echo YELLOW;
				break;
			case 'danger':
				echo RED;
				break;
			case 'info':
				echo BLUE;
				break;

			default:
				echo GREEN;
				break;
		}

		echo $text;
		if ($newline)
			echo PHP_EOL;
		if ($reset)
			echo RESET;
	}

	 /** Make helper functions */

	function getControllerName($name) {
		if (!$name){
			echo "\x1b[32mMaking a Controller.. without a name? didn't think so ^_^\nYour Controller Name:\n\x1b[33m";
			$name = readline();
		}
		$name = ucfirst($name);
		if (!endsWith($name, 'Controller') && !endsWith($name, 'controller'))
			$name .= "Controller";
		$name = str_replace('controller', 'Controller', $name);
		echo "\x1b[32m" . $name . PHP_EOL;
		return $name;
	}

	function endsWith($haystack, $needle) {
		$lenght = strlen($needle);
		if (!$lenght)
			return True;
		return substr($haystack, -$lenght) === $needle;
	}

	/** Migrate helper function */

    function getDatabaseConfig() {
        return file_exists( __DIR__ . "/../config/db.conf") ?
            parse_ini_file( __DIR__ . "/../config/db.conf") : NULL;
    }

    function getDatabaseName(string $dsn): ?string
    {
        $config = explode(';', $dsn);
        if (sizeof($config) != 3)
            return NULL;
        if (empty($config[2]))
            return NULL;
        $data = $config[2];
        $data = explode('=', $data);
        if (isset($data[1]) && !empty($data[1]))
            return $data[1];
        return NUll;
    }

    function getDatabaseDSN(string $config): ?string
    {
        $config = explode(';', $config);
        if (sizeof($config) == 3)
            array_pop($config);
        else
            return NULL;
        return implode(';', $config);
    }

    function migrateHelper($var = 1): void
    {
        if ($var)
            echo "Here is the migrate Commands you can run:" . PHP_EOL;

        echo "migrate:create:database \tto create the project database if it doesn't not exist --database fetched from config file" . PHP_EOL;
        echo "migrate:migrate\t\t\tto apply migration from the migrations folder" . PHP_EOL;
        echo "migrate:migrate:down:int\trevert last int migrations" . PHP_EOL;
        if ($var)
            exit(1);
    }

    /**
     * server command helpers
     */

    function serverHelper($s = 1): void
    {
        if ($s)
	        echo "Here is the server Commands you can run:" . PHP_EOL;

	    echo "server:start\t\tstart a php server on default port 8000 unless another port has been specified" . PHP_EOL;
	    echo "\t\t\t-p\tfollowed by the port [-p 8080]" . PHP_EOL;
	    echo "server:status\t\tsee server status and on which port it's running" . PHP_EOL;
	    echo "server:stop\t\tstop the running server" . PHP_EOL;
	    echo "server:restart\t\trestart server ps:will keep the same port" . PHP_EOL;
	    echo "server:log\t\tget php server logs" . PHP_EOL;
	    echo "\t\t\t-t\tkeep watching outputting logs" . PHP_EOL;
    }

	/**
	 * Setup helper
	 */

	function setupHelper():void
	{
		echo "setup:setup\t\tsetup your local env, you should run this command if you just installed the app" . PHP_EOL;
		echo "setup:mail\t\tsetup your mail server, so you can send mails" . PHP_EOL;
	}

	 /**
	  * the main menu function and it's helper
	  */
	function show_help() {
		echo "This is a camagru console help panel" . PHP_EOL;
		echo "here is the list of the commands you can run so far" . PHP_EOL;
		echo "make" . PHP_EOL;

		echo "make:controller" . PHP_EOL;

		echo PHP_EOL . "migrations" . PHP_EOL;

		migrateHelper(0);

		echo PHP_EOL . "server" . PHP_EOL;
		serverHelper(0);
	}

//	echo "\n";
