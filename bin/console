#!/usr/bin/env php
<?php

	if (PHP_SAPI !== 'cli') {
    		echo 'bin/console must be run as a CLI application';
    		exit(1);
	}

	if ($argc == 1) {
		show_help();
		exit();
	}
	$command = $argv[1];
	$arguments = explode(':', $command);
	$command = array_shift($arguments);
	$arguments = $arguments ?? null;

	/** get extra parameters */
    $parameters = NULL;
	if ($argc > 2) {
	    $parameters = array_slice($argv, 2);
    }

	/** $console a predefine variable for other scripts to access if they are running tho console */
    $console = 1;

	/** command reading debugger */
    // echo $command . PHP_EOL;
    //var_dump($parameters);

	if ($command === 'make') {
		$controllerName = getControllerName($argv[2] ?? '');
		makeController($controllerName);
	} else if ($command == 'migrate') {
	    if (!$arguments)
	        migrateHelper();
	    else if ($arguments[0] == 'create') {
	        if (isset($arguments[1]) && $arguments[1] == 'database') {
	            echo "creating database..." . PHP_EOL;
	            if (!$databaseConfig = getDatabaseConfig())
	                die("Config File is not found" . PHP_EOL);
	            if (!$database = getDatabaseName($databaseConfig['DB_DSN']))
	                die("config file is miss written please check config/db.config.example\n");

	            /** get connection config from config file */
                $dsn = getDatabaseDSN($databaseConfig['DB_DSN']);
                $user = $databaseConfig['DB_USER'] ?? NULL;
                $pass = $databaseConfig['DB_PASSWORD'] ?? NULL;

                /** try to connect to database and create the database */
                try {
                    $dbh = new PDO($dsn, $user , $pass);

                    $dbh->exec("CREATE DATABASE `$database`;
                        CREATE USER '$user'@'localhost' IDENTIFIED BY '$pass';
                        GRANT ALL ON `$database`.* TO '$user'@'localhost';
                        FLUSH PRIVILEGES;")
                    or die(print_r($dbh->errorInfo(), true));
                    echo "database $database created";
                    unset($dbh);
                }
                catch (PDOException $e) {
                    die("DB ERROR: " . $e->getMessage());
                }
            }
        } elseif ($arguments[0] == 'migrate') {
	        if (isset($arguments[1]) && $arguments[1] == 'down'){
	            $action = 1;
	            if (isset($arguments[2]))
	                $migrationsNumber = $arguments[2];
	            else
	                $migrationsNumber = 0;
                echo "Reverting last ";
                echo  !$migrationsNumber ? "all" : $migrationsNumber;
                echo " migration(s)" . PHP_EOL;
            } else {
                echo "Applying Migrations" . PHP_EOL;
            }
	        include "migrations.php";
        } else {
	        migrateHelper();
        }
    } else if ($command == 'server') {
	    if (!$arguments)
	        serverHelper();
	    elseif ($arguments[0] == 'start') {
	        // check if there is a running server already
            if (file_exists('var/server-app.pid')) {
	            if (shell_exec("sh bin/scripts/server_status.sh") == 1) {
		            echo "Can't run server, server is already running.." . PHP_EOL;
	                exit(1);
	            } else
		            unlink('var/server-app.pid');
            }
		    if ($parameters) {
			    if (in_array('-p', $parameters)) {
				    $port = $parameters[array_search('-p', $parameters) + 1] ?? 8000;
				    echo "Starting a development server on port " . $port . PHP_EOL;
				    shell_exec('sh bin/scripts/server_start.sh ' . $port);
			    } else
			        echo "Parameter is unknown" . PHP_EOL;
		    } else {
			    echo "Starting a development server on port 8000" . PHP_EOL;
			    shell_exec('sh bin/scripts/server_start.sh');
		    }
        } elseif ($arguments[0] == 'stop') {
		    if (file_exists('var/server-app.pid')) {
			    if (shell_exec("sh bin/scripts/server_status.sh") == 1) {
				    echo "Stopping server.." . PHP_EOL;
				    shell_exec('sh bin/scripts/server_stop.sh');
			    } else {
				    unlink('var/server-app.pid');
				    echo "There is no running server.." . PHP_EOL;
			    }
		    } else {
			    echo "There is no running server.." . PHP_EOL;
            }
        }
	} else {
	    echo "Command Not Found" . PHP_EOL;
        show_help();
        exit(1);
    }

	/**
	 * functionality functions
	 * 
	 */

	/** make functions */
	function makeController($controllerName) {
		echo "making $controllerName"; //todo make it work :D
	}




	/**
	 * Helper functions
	 * 
	 * those functions are helping the main functions up
	 */

	 /** Make helper functions */

	function getControllerName($name) {
		if (!$name){
			echo "\x1b[32mMaking a Controller.. without a name? didn't think so ^_^\nYour Controller Name:\n\x1b[33m";
			$name = readline();
		}
		$name = ucfirst($name);
		if (!endsWith($name, 'Controller') && !endsWith($name, 'controller'))
			$name .= "Controller";
		$name = str_replace('controller', 'Controller', $name);
		echo "\x1b[32m" . $name . PHP_EOL;
		return $name;
	}

	function endsWith($haystack, $needle) {
		$lenght = strlen($needle);
		if (!$lenght)
			return True;
		return substr($haystack, -$lenght) === $needle;
	}

	/** Migrate helper function */

    function getDatabaseConfig() {
        return file_exists( __DIR__ . "/../config/db.conf") ?
            parse_ini_file( __DIR__ . "/../config/db.conf") : NULL;
    }

    function getDatabaseName(string $dsn): ?string
    {
        $config = explode(';', $dsn);
        if (sizeof($config) != 3)
            return NULL;
        if (empty($config[2]))
            return NULL;
        $data = $config[2];
        $data = explode('=', $data);
        if (isset($data[1]) && !empty($data[1]))
            return $data[1];
        return NUll;
    }

    function getDatabaseDSN(string $config): ?string
    {
        $config = explode(';', $config);
        if (sizeof($config) == 3)
            array_pop($config);
        else
            return NULL;
        return implode(';', $config);
    }

    function migrateHelper($var = 1): void
    {
        if ($var)
            echo "Here is the migrate Commands you can run:" . PHP_EOL;

        echo "migrate:create:database \tto create the project database if it doesn't not exist --database fetched from config file" . PHP_EOL;
        echo "migrate:migrate\t\t\tto apply migration from the migrations folder" . PHP_EOL;
        echo "migrate:migrate:down:int\trevert last int migrations" . PHP_EOL;
        if ($var)
            exit(1);
    }

    /**
     * server command helpers
     */

    function serverHelper($s = 1): void
    {
        if ($s)
	        echo "Here is the server Commands you can run:" . PHP_EOL;

	    echo "server:start\t\tstart a php server on default port 8000 unless another port has been specified" . PHP_EOL;
	    echo "\t\t\t-p\tfollowed by the port [-p 8080]" . PHP_EOL;
	    echo "\t\t\t-d\tto run in the background" . PHP_EOL;
    }

	 /**
	  * the main menu function and it's helper
	  */
	function show_help() {
		echo "This is a camagru console help panel" . PHP_EOL;
		echo "here is the list of the commands you can run so far" . PHP_EOL;
		echo "make" . PHP_EOL;

		echo "make:controller" . PHP_EOL;

		echo PHP_EOL . "migrations" . PHP_EOL;

		migrateHelper(0);

		echo PHP_EOL . "server" . PHP_EOL;
		serverHelper(0);
	}

//	echo "\n";
